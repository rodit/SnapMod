#option access_modifiers strict

import android.app.Activity;
import android.app.Notification;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.graphics.Matrix;
import android.media.MediaFormat;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.RemoteViews;

import com.google.gson.annotations.SerializedName;

import com.snap.imageloading.view.SnapImageView;
import com.snapchat.client.messaging.Conversation;
import com.snapchat.client.messaging.FetchConversationWithMessagesCallback;
import com.snapchat.client.messaging.FetchMessageCallback;

import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Iterable;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.lang.UnsupportedOperationException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.crypto.Cipher;

[certain]
class MainActivity expects com.snap.mushroom.MainActivity {

    void $attachBaseContext(Context)
}

[certain]
class UUID expects com.snapchat.client.messaging.UUID {

   byte[] $getId()
}

[certain]
class ConversationManager expects com.snapchat.client.messaging.ConversationManager$CppProxy {

    void $sendMessageWithContent(...)
    void $updateMessage(...)
    void $displayedMessages(...)
    void $enterConversation(...)
    void $exitConversation(...)
    void $sendTypingNotification(...)
    void $fetchConversationWithMessages(...)
    void $fetchMessage(...)
}

[certain]
class SnapManager expects com.snapchat.client.messaging.SnapManager$CppProxy {

    void $onSnapInteraction(...)
}

[certain]
class Callback expects com.snapchat.client.messaging.Callback {

    void $onError(...)
    void $onSuccess()
}

[certain]
enum SavePolicy expects com.snapchat.client.messaging.SavePolicy {

    static this $PROHIBITED;
    static this $LIFETIME;
    static this $VIEW_SESSION;
}

[certain]
enum ContentType expects com.snapchat.client.messaging.ContentType {

    static this $UNKNOWN;
    static this $SNAP;
    static this $CHAT;
    static this $LOCATION;
    static this $STATUS_SAVE_TO_CAMERA_ROLL;
    static this $STATUS_CONVERSATION_CAPTURE_SCREENSHOT;
    static this $STATUS_CONVERSATION_CAPTURE_RECORD;
}

[certain]
class MessageDestinations expects com.snapchat.client.messaging.MessageDestinations {

    ArrayList $getConversations()
}

[certain]
enum SnapInteractionType expects com.snapchat.client.messaging.SnapInteractionType {

    static this $VIEWING_INITIATED;
    static this $VIEWING_FINISHED;
    static this $REPLAY_GESTURE_PERFORMED;
    static this $MARK_AS_INVALID;
}

[certain]
enum MessageUpdate expects com.snapchat.client.messaging.MessageUpdate {

    static this $UNKNOWN;
    static this $READ;
    static this $RELEASE;
    static this $SAVE;
    static this $UNSAVE;
    static this $ERASE;
    static this $SCREENSHOT;
    static this $SCREEN_RECORD;
    static this $REPLAY;
}

[certain]
class LocalMessageContent expects com.snapchat.client.messaging.LocalMessageContent {

    !SavePolicy $getSavePolicy()
    !ContentType $getContentType()
}

[certain]
class PresenceSession expects com.snapchat.talkcorev3.PresenceSession$CppProxy {

    void $activate()
    void $deactivate()
    void $processTypingActivity(...)
}

[certain]
class NetworkApi expects com.snapchat.client.network_api.NetworkApi$CppProxy {

    void $submit(...)
}

[certain]
class MessageDescriptor expects com.snapchat.client.messaging.MessageDescriptor {

    !UUID $getConversationId()
    long $getMessageId()
}

[certain]
class MessageContent expects com.snapchat.client.messaging.MessageContent {

    byte[] $getContent()
    !ContentType $getContentType()
}

[certain]
class MessageMetadata expects com.snapchat.client.messaging.MessageMetadata {

    boolean $getIsSaveable()
    ArrayList $getSavedBy()
}

[certain]
class Message expects com.snapchat.client.messaging.Message {

    !MessageDescriptor $getDescriptor()
    !MessageContent $getMessageContent()
    !MessageMetadata $getMetadata()
    !UUID $getSenderId()
}

[certain]
class Participant expects com.snapchat.client.messaging.Participant {

    int $getColor()
    !UUID $getParticipantId()
}

[certain]
class Conversation expects com.snapchat.client.messaging.Conversation {

    !UUID $getConversationId()
    String $getTitle()
    ArrayList $getParticipants()
}

[certain, obfuscated]
enum MessageState {

    [late] static this .fields { NONE, SENT, DELIVERED, VIEWED, SCREENSHOT, PENDING }
}

[certain, obfuscated]
enum SnapPlaybackStatus {

    [late] static this .fields { PLAYABLE, VIEWEDREPLAYABLE, PLAYING, VIEWEDNOTREPLAYABLE, SAVED, NONE }
}

[certain, obfuscated]
enum SaveType {

    [late] static this .fields { SNAPCHAT_ALBUM, SPECTACLES_ALBUM, EXTERNAL_APPS, SMS, EMAIL }
}


[certain, obfuscated]
enum ChatLayouts {

    [late] static this .fields {
        UNKNOWN,
        TEXT_WITH_MEDIA_CARDS,
        SNAP,
        CHAT_MEDIA,
        MEMORIES_STORY,
        TEXT_STORY_REPLY,
        AUDIO_NOTE,
        ERASE,
        SAVED_SNAP,
        PLUGIN,
        PLUGIN_STATUS
    }

    int layoutId;
}

[certain, obfuscated]
enum SnapMediaType {

    [late] static this .fields { TEXT, MEDIA, STICKER, MEDIA_V3, MEDIA_V4 }

    String name;
}

[certain]
class MediaPackageMedia {

    @SerializedName("video_duration_ms")
    Long videoDurationMs;
    @SerializedName("camera_api")
    String cameraApi;
    @SerializedName("media_file_size_bytes")
    public Long fileSize;
    @SerializedName("height")
    Integer height;
    @SerializedName("width")
    Integer width;
}

[certain]
class MediaPackage {

    @SerializedName("session_id")
    String sessionId;
    @SerializedName("content_id")
    String contentId;
    @SerializedName("mediaId")
    String mediaId;
    @SerializedName("media")
    !MediaPackageMedia media;
}

[certain]
class MediaReference {

    [late] Uri uri;

    java.lang.String $toString() {
        [conserve]
        .string contains "MediaReference(";
        .string contains "type=", bind field mediaType next reference;
        [strict]
        .string contains "uri=", bind field uri next reference;
    }
}

[certain, obfuscated]
enum MediaType {

    [late] static this .fields { IMAGE, VIDEO, VIDEO_NO_SOUND, AUDIO, WEB }
}

[late]
interface RxObserver {

    void error(Throwable)
    void accept(*)
    void disposable(*)
}

[late]
interface RxSupplierBase {

    void subscribe(*)
}

[late]
class RxSupplier {

    void subscribe(#RxObserver) {
        .string "observer is null";
        .string "subscribeActual failed";
    }
}

[certain]
@*("chat_media/*/*")
class ChatMediaHandler {

    #RxSupplier resolve(Uri, Set, boolean, Set)
}

interface MessageDataModel {

    String getArroyoMessageId()
    String getSenderDisplayName()
    String getConversationId()
    String $getType()
    String getSenderId()
    String getSenderUsername()

    !MediaBaseBase getMedia()

    !MessageState getMessageState()
    !SnapPlaybackStatus getPlaybackStatus()
}

class ChatModelBase {

    Context context;
    * chatLayout;
    !MessageDataModel messageData;
    String senderId;
    [discard] Map map0;
    boolean boolField;
    [discard] boolean b0;
    #MediaDownloadStatus status;

    String $toString() {
        .string contains "ChatViewModelV1";
    }

    boolean canSave()
    !SaveType getSaveType()
}

class ChatActionHelper {

    void $<init>(...) {
        .string "ChatActionHelper";
    }

    [discard] boolean bm0(!ChatModelBase)
    boolean canSave(!ChatModelBase)
}

[late]
class ParameterPackage {

    void $<init>(Boolean, Double, ...)

    String $toString() {
        [conserve]
        .string contains "ParameterPackage(";
        .string contains "isInfiniteDuration", bind field isInfiniteDuration next reference;
        .string contains "timerOrDurationSeconds", bind field timeOrDurationSeconds next reference;
    }
}

[late]
interface MediaBaseBase {
    String getMediaType()
    String getMessageType()
}

[late, discard]
interface MediaBase implements #MediaBaseBase {

    !RxSupplier s0(...)
    List l0()
}

[certain]
class LiveSnapMedia implements #MediaBase {
    @SerializedName("parameterPackage")
    #ParameterPackage parameterPackage;
    String mediaId;
    #MediaType mediaType;

    void $<init>()

    [discard] List m0() {
        .string "GetMedia isn\'t implemented on SnapParcelContent";
    }
}

[certain]
class MediaItem {

    String $toString() {
        [conserve]
        .string "MediaItem(id=";
        .string contains "id=", bind field id next reference;
        .string contains "type=", bind field mediaType next reference;
    }
}

class GallerySnapMedia {

    !MediaItem media;

    [discard] String s0() {
        .field !SnapMediaType->!MEDIA_V4;
    }

    [discard] List l0() {
        .method Collections->singletonList;
    }

    String getMediaType()
}

[late]
class ChatModelWithMedia {

    void $<init>(Context, ...)
}

class ChatModelLiveSnap extends #ChatModelWithMedia {

    [discard] boolean b0;

    void $<init>(Context, *, *, *, *, !MessageDataModel, !LiveSnapMedia, String, Map, boolean, ...)

    [discard] boolean bm0(*)
    [discard] boolean bm1()
}

class ChatModelSavedSnap {

    !MediaType mediaType;
    [discard] Uri u0;
    [discard] Uri u1;

    void $<init>(Context, !MessageDataModel, String, Map, boolean, *, boolean, int, int, !LiveSnapMedia, String, ...) {
        .field !ChatLayouts->!SAVED_SNAP;
        .method TimeUnit->toMillis;
        .method Context->getResources;
    }
}

[certain]
class CalendarDate {

    int month;
    int day;

    void $<init>(int, int)

    String $toString() {
        .string contains "CalendarDate";
        .string contains "day=";
    }
}

[certain]
class FriendProfilePageData {

    [late] #FriendLinkType friendLinkType;
    [late] !CalendarDate birthday;

    String $toString() {
        .string contains "FriendProfilePageData";
        .string contains "displayName", bind field displayName next reference;
        .string contains "friendLinkType", bind field friendLinkType next reference;
        .string contains "addedTimestamp", bind field addedTimestamp next reference;
        .string contains "reverseAddedTimestamp", bind field reverseAddedTimestamp next reference;
        .string contains "birthday", bind field birthday next reference;
        .string contains "addSourceTypeForNonFriend", bind field addSourceTypeForNonFriend next reference;
    }
}

[certain, obfuscated]
enum ProfileSectionType {

    [late] static this .fields { FOOTER_INFO_ITEM, IDENTITY_CAROUSEL }
}

class FooterInfoItem {

    String text;

    void $<init>(String, long, ...) {
        .field !ProfileSectionType->!FOOTER_INFO_ITEM;
    }
}

class FriendProfileTransformer {

    [discard] int i0;
    Object section;
    Object data;

    void $<init>(Object, Object, int)

    * $apply(...) {
        .string "LOOK:ContentManagerResourceResolver#createall";
    }
}

[certain]
class ChatContext {

    [discard] long feedId;
    String conversationId;

    String $toString() {
        .string "ChatContext(feedId=";
        .string contains "conversationId=";
    }
}

[certain, obfuscated]
enum ChatMenuItemType {

    [late] static this .fields {
        COPY,
        SAVE_IN_CHAT,
        UNSAVE_IN_CHAT,
        SAVE_TO_CAMERA_ROLL,
        ERASE_QUOTE,
        SNAP_REPLY
    }
}

class ActionMenuPresenter {

    void $<init>(...) {
        .string "ActionMenuPresenter";
    }

    static void handleAction(this, !ChatContext, !ChatModelBase, !ChatMenuItemType, ...)
}

[certain]
class BitmojiUriHandler {

    void $<init>(...) {
        .string "BitmojiUriHandler";
    }

    * handle(Uri, ...) {
        .string "BitmojiUriHandler";
    }
}

[certain, obfuscated]
enum FriendAddMethod {

    [late] static this .fields {
        ADDED_BY_USERNAME,
        ADDED_BY_ADDED_ME_BACK,
        ADDED_BY_SUGGESTED,
        ADDED_BY_SHARED_USERNAME,
        ADDED_BY_SHARED_STORY,
        ADDED_BY_GROUP_CHAT
    }
}

[certain]
class FriendActionRequest {

    @com.google.gson.annotations.SerializedName("action")
    java.lang.String action;
    @com.google.gson.annotations.SerializedName("added_by")
    java.lang.String addedBy;
}

class FriendActionClient {

    void $<init>(...) {
        .string "FriendActionClient";
    }

    * sendFriendAction(!FriendActionRequest)
}

[certain]
class MemoriesPickerVideoDurationConfig {

    long maxDuration;
    TimeUnit timeUnit;
    int warningTextResource;

    String $toString() {
        .string contains "MemoriesPickerVideoDurationConfig";
        .string contains "durationUnits";
    }
}

[certain]
class OperaActionMenuOptionViewModel {

    void $<init>(int, int, boolean, ...)

    java.lang.String $toString() {
        [conserve]
        .string contains "OperaActionMenuOptionViewModel";
        .string contains "iconResource", bind field iconResource next reference;
        .string contains "textResource", bind field textResource next reference;
        .string contains "textColorResource", bind field textColorResource next reference;
        .string contains "eventName", bind field eventName next reference;
        .string contains "mShouldDismissActionMenu", bind field shouldDismissActionMenu next reference;
        .string contains "isLoading", bind field isLoading next reference;
        .string contains "actionMenuId", bind field actionMenuId next reference;
    }
}

[certain, obfuscated]
enum OperaContextAction {

    [late] static this .fields {
        SEND,
        EDIT,
        EXPORT,
        IN_APP_REPORT,
        REPORT_AD,
        HIDE_AD,
        SAVE
    }
}

class OperaContextActions {

    [discard] static !OperaActionMenuOptionViewModel vm0;
    [discard] static !OperaActionMenuOptionViewModel vm1;
    [discard] static !OperaActionMenuOptionViewModel vm2;
    [discard] static !OperaActionMenuOptionViewModel vm3;
    [discard] static !OperaActionMenuOptionViewModel vm4;

    static void $<clinit>() {
        .field !OperaContextAction->!IN_APP_REPORT, bind field reportAction next reference;
        .field !OperaContextAction->!SAVE, bind field saveAction next reference;
    }
}


class StreamingMethod {

    String $toString() {
        .string contains "StreamingInfo";
        .string contains "requestHeaders";
    }
}

class OperaMediaInfo {

    String uri;
    #EncryptionAlgorithm encryption;
    !StreamingMethod streamingMethod;

    [discard] List l0;
    [discard] * a0;
    [discard] Matrix m0;

    String $toString() {
        .string "OperaMediaInfo";
        .string "hasEncryptionAlgorithm";
    }
}

[late]
interface EncryptionAlgorithm {

    InputStream encryptStream(InputStream)
    InputStream decryptStream(InputStream)
}

[certain, discard]
class FeatureMetadata {

    String $toString() {
        [conserve]
        .string contains "FeatureMetadata";
        .string contains "attribution=";
    }
}

[certain, discard]
class Metrics {

    String $toString() {
        .string "Metrics(loadSource=";
    }
}

interface MediaStreamProvider {

    [discard] !FeatureMetadata fm0()
    InputStream getMediaStream()
    void $dispose()
    [discard] boolean b0()
    [discard] !Metrics m0()
}

[certain]
class SendingPacketBuilder {

    void $<init>(...) {
        .string "SendingPacketBuilder";
    }
}

class SerializableContent extends #MediaContainer {

    !MediaBaseBase message;

    String $toString() {
        .string "SerializableContent(message=";
    }
}

class MessagePayload {

    [discard] String s0;
    !MediaContainer media;

    void $dispose()
}

class SendAndRecycleProcessor {

    void $<init>(...) {
        .string "SendAndRecycleProcessor";
    }
}

[certain, obfuscated]
enum MessageMediaSource {

    [late] static this .fields {
        CAMERA,
        CHAT,
        IN_APP_NOTIFICATION,
        DIRECT_SHARE,
        FEED_REPLY_BUTTON,
        GALLERY,
        GALLERY_STORY,
        CAMERA_ROLL
    }

    [not] int i0;
}

class MessageSenderCrossroad {

    [late] !MessagePayload payload;

    void $<init>(!MessagePayload, !SendAndRecycleProcessor, ...) {
        [strict]
        .expr this->* = .p0, bind field payload current reference;
    }

    * $apply(*)
}

class MessageTypeChecker {

    [discard] static boolean isFromCameraRoll(!MessagePayload, List) {
        .field !MessageMediaSource->!CAMERA_ROLL;
    }

    static boolean isMediaOverLimit(List) {
        .const 11000;
    }
}

[certain]
class EmptyParamsMap extends #ParamsMap {

    [discard] void m0(...) {
        .string "Empty params is immutable";
        .type UnsupportedOperationException;
    }

    [discard] void m1(...) {
        .string "Empty params is immutable";
        .type UnsupportedOperationException;
    }
}

[late]
class ParamsMap {

    ConcurrentHashMap map;

    void put(#MapKey, Object) {
        .field this->!map;
        .method ConcurrentHashMap->put;
    }
}

[late]
class MapKey {
    String name;
    Object defaultValue;
    boolean hasDefaultValue;
}

[certain]
class StoryAutoAdvanceMode {

    [late] static this NO_AUTO_ADVANCE;
    [late] static this FIXED_DURATION;
    [late] static this VIDEO_COMPLETION;

    static void $<clinit>() {
        [strict]
        .string "NO_AUTO_ADVANCE", bind field NO_AUTO_ADVANCE next reference;
        [strict]
        .string "FIXED_DURATION", bind field FIXED_DURATION next reference;
        [strict]
        .string "VIDEO_COMPLETION", bind field VIDEO_COMPLETION next reference;
    }
}

[certain]
class StoryMediaPlaybackMode {

    [late] static this LOOPING;
    [late] static this ONCE;
    [late] static this LOOPING_WHEN_LESS_THAN_TEN_SECONDS;
    [late] static this PAUSED;

    static void $<clinit>() {
        [strict]
        .string "LOOPING", bind field LOOPING next reference;
        [strict]
        .string "ONCE", bind field ONCE next reference;
        [strict]
        .string "LOOPING_WHEN_LESS_THAN_TEN_SECONDS", bind field LOOPING_WHEN_LESS_THAN_TEN_SECONDS next reference;
        [strict]
        .string "PAUSED", bind field PAUSED next reference;
    }
}

class StoryMetadata extends !ParamsMap {

    [late] !MapKey overlayImageMediaInfo;
    [late] !MapKey videoMediaInfo;
    [late] !MapKey imageMediaInfo;
    [late] !MapKey actionMenuOptions;
    [late] !MapKey autoAdvanceMode;
    [late] !MapKey mediaPlaybackMode;

    static void $<clinit>() {
        [strict]
        .string "overlay_image_media_info", bind field overlayImageMediaInfo next reference;
        [strict]
        .string "video_media_info", bind field videoMediaInfo next reference;
        [strict]
        .string "image_media_info", bind field imageMediaInfo next reference;
        [strict]
        .string "auto_advance_mode", bind field autoAdvanceMode next reference;
        [strict]
        .string "media_playback_mode", bind field mediaPlaybackMode next reference;
        [strict]
        .string "action_menu_options", bind field actionMenuOptions next reference;
    }
}

class ContextStoryKeys {

    [late] static !MapKey contextSession;
    [late, discard] static !MapKey hideContext;

    static void $<clinit>() {
        [strict]
        .string "context_session", bind field contextSession next reference;
        [strict]
        .string "HIDE_CONTEXT", bind field hideContext next reference;
    }
}

class FriendStoryKeys {

    [late] !MapKey playableSnapStoryRecord;
    [late] !MapKey storySnapViewReportingInfo;

    static void $<clinit>() {
        [strict]
        .string "PLAYABLE_STORY_SNAP_RECORD", bind field playableSnapStoryRecord next reference;
        [strict]
        .string "STORY_SNAP_VIEW_REPORTING_INFO", bind field storySnapViewReportingInfo next reference;
    }
}

class MessageStoryKeys {

    [late] !MapKey messageId;
    [late] !MapKey snapInSavedState;

    static void $<clinit>() {
        [strict]
        .string "MESSAGE_ID", bind field messageId next reference;
        [strict]
        .string "SNAP_IN_SAVED_STATE", bind field snapInSavedState next reference;
    }
}

[certain]
class PlayableStorySnap {

    [late] String displayName;

    String $toString() {
        .string contains "PlayableStorySnap";
        .string contains "displayName=", bind field displayName next reference;
    }
}

[certain, discard]
class ChatContextParams {

    String $toString() {
        .string contains "ChatContextParams";
        .string contains "conversationId=";
    }
}

[certain, discard]
class StoryRemixParams {

    String $toString() {
        .string contains "StoryRemixParams";
        .string contains "contentUri=";
    }
}

[certain, discard]
class SnapContextParams {

    String $toString() {
        .string contains "SnapContextParams";
        .string contains "storyMediaKey=";
    }
}

[certain]
class SnapUsername {

    String getDisplayString()

    String $toString() {
        .string "Username(originalUsername=";
        .string contains "mutableUsername=";
    }
}

[late]
class SnapContextInfo {

    [discard] !MediaType mediaType;
    !SnapUsername username;
}

class ContextSession {

    [discard] !ChatContextParams chatContextParams;
    [discard] !StoryRemixParams storyRemixParams;
    [discard] !SnapContextParams snapContextParams;
    #SnapContextInfo info;
}

[certain]
class ContextActionMenuModel {

    String text;
    [late] #Func1 onClick;
    !OperaContextAction action;

    String $toString() {
        .string contains "ContextActionMenuModel";
        [strict]
        .string contains "onClick=", bind field onClick next reference;
    }
}

[certain]
class OperaContextMenuProperty {

    [late] String friendUsername;

    String $toString() {
        .string contains "OperaContextMenuProperty";
        [strict]
        .string contains "friendUsername=", bind field friendUsername next reference;
    }
}

[certain]
enum PublicProfileTileType {

    static * FRIEND_PROFILE_SNAP_PRO_PUBLIC_PROFILE;

    void $<init>(...) {
        .string "FRIEND_PROFILE_SNAP_PRO_PUBLIC_PROFILE";
    }
}

[certain]
interface PublicProfileMetadata {

    [discard] String s0()
    String getProfilePicture72()
    String $getId()
    String $getTitle()
    [discard] String s1()
    [discard] String s2()
    String getProfilePicture90()
    String getUsername()
}

[late]
interface PublicProfileTileInfo {

    !PublicProfileMetadata getMetadata()
}

[certain]
class PublicProfileTile extends #PublicProfileTileBase {

    #PublicProfileTileInfo info;
    String profilePictureUrl;

    void $<init>(...) {
        .field !PublicProfileTileType->!FRIEND_PROFILE_SNAP_PRO_PUBLIC_PROFILE;
    }
}

[certain]
class PublicProfileTileTransformer {

    SnapImageView profileImageView;

    void transform(!PublicProfileTileBase, ...) {
        .string "SUBCATEGORY_V3_GOVERNMENT_ORG";
    }
}



[late]
class ComposerUser {

    String $getUsername()
}



[late]
class FriendListener {

    * handle(Object, Object)
}

[certain]
class DisplayInfoContainer {

    [late] String term;

    String $toString() {
        [strict]
        .string "DisplayInfoContainer(term=", bind field term next reference;
    }
}



[certain, discard]
class FriendsFeedRecordHolder {

    [late] #SnapIterable records;

    String $toString() {
        .string contains "records=";
        [strict]
        .string contains "activeConversationState", bind field records previous reference;
    }
}

[certain]
class FriendsFeedView {

    [late] String key;
    [late] String friendmojiCategories;
    [late] Long lastInteractionTimestamp;
    [late] Long pinnedTimestamp;

    String $toString() {
        .string contains "FriendsFeedView";
        [strict]
        .string contains "key:", bind field key next reference;
        [strict]
        .string contains "friendmojiCategories:", bind field friendmojiCategories next reference;
        [strict]
        .string contains "lastInteractionTimestamp:", bind field lastInteractionTimestamp next reference;
        [strict]
        .string contains "pinnedTimestamp:", bind field pinnedTimestamp next reference;
    }
}

[certain]
class FriendsFeedConfig {

    [late] boolean isPinConversationsEnabled;

    String $toString() {
        .string contains "FriendsFeedConfig";
        [strict]
        .string ", isPinConversationsEnabled=", bind field isPinConversationsEnabled next reference;
    }
}

[late]
interface SnapIterable implements Iterable {

    Object $get(int)
    int size()
}

[certain]
class BasicFeedInfo {

    [late] String key;

    String $toString() {
        .string contains "GetBasicFeedInfoForConversation";
        [strict]
        .string contains "key:", bind field key next reference;
    }
}

[late]
class FeedInfoHolder extends #FeedInfoHolderBase {

    !BasicFeedInfo info;
}

[certain]
class FriendInfo {

    String userId;
    String displayName;

    String $toString() {
        .string contains "FriendInfo";
        .string contains "friendUserId";
        .string contains "friendDisplayName";
    }
}

class FriendChatActionMenuBuilder {

    #FeedInfoHolder feedInfoHolder;
    [discard] !FriendInfo friendInfo;

    #RxBase build() {
        .method Collections->singletonList;
        .new ArrayList;
    }
}

[late]
class RxBase {

    static * singleton(Object) {
        .string "item is null";
        .method *->requireNonNull;
        .new #RxSingleton;
    }
}

[late]
class RxSingleton {

    Object value;
}

[certain]
class ActionMenuOptionTextViewModel {

    void $<init>(int, String, Integer, Integer, Integer, int)

    String $toString() {
        .string contains "ActionMenuOptionTextViewModel";
        .string contains "textParam";
    }
}

[certain]
class ActionMenuActionModel {

    String $toString() {
        .string "ActionMenuActionModel(eventData=";
    }
}

[certain, obfuscated]
enum ActionMenuOptionItemType {

    [late] static this .fields {
        OPTION_ITEM,
        OPTION_ITEM_TOGGLE,
        SIMPLE_OPTION_ITEM,
        SPINNER_OPTION_ITEM,
        SUBTITLE_OPTION_ITEM,
        FEED_OPTION_ITEM
    }
}

[certain]
class ActionMenuOptionItemViewModel {

    void $<init>(!ActionMenuOptionTextViewModel, !ActionMenuActionModel, ...)

    String $toString() {
        .string contains "ActionMenuOptionItemViewModel";
        .string contains "actionModel";
    }
}

[certain]
class ActionMenuOptionToggleItemViewModel {

    void $<init>(!ActionMenuOptionTextViewModel, !ActionMenuActionModel, boolean)

    String $toString() {
        .string contains "ActionMenuOptionToggleItemViewModel";
        .string contains "actionModel";
    }
}

[certain, discard, obfuscated]
enum ChatActionType {

    [late] static this .fields {
        CHAT_BUTTON_CLICK,
        SNAP_BUTTON_CLICK,
        AUDIO_CALL_BUTTON_CLICK,
        VIDEO_CALL_BUTTON_CLICK,
        SETTINGS_CLICK
    }
}

[certain]
class SendChatActionDataModel {

    String key;

    void $<init>(String, boolean, ...)

    String $toString() {
        .string contains "SendChatActionDataModel";
        .string contains "isGroup";
    }
}

[certain, exact]
class SendChatAction extends #ActionBase {

    !SendChatActionDataModel dataModel;

    void $<init>(!SendChatActionDataModel) {
        .field !ChatActionType->!CHAT_BUTTON_CLICK;
    }
}

[certain, exact]
class SettingsClickAction extends !ActionBase {

    void $<init>() {
        .field !ChatActionType->!SETTINGS_CLICK;
    }
}

class FriendChatActionHandler {

    [discard] !FeedInfoHolderBase info;

    void handle(!ActionBase) {
        .type !SettingsClickAction;
        .type !SendChatAction;
    }
}

[late, obfuscated]
enum ConfigValueType {

    [late] static this .fields { BOOLEAN, INTEGER, LONG, FLOAT, DOUBLE, STRING }
}

[late]
class ConfigValue {

    Object defaultValue;
    #ConfigValueType valueType;
}

[late]
interface ConfigKeyBase {

    #ConfigValue value()
    String getName()
}

[certain, obfuscated]
enum AdConfigKey implements #ConfigKeyBase {

    [late] static this .fields { GLOBAL_MIN_TIME_BETWEEN_ADS, GLOBAL_MIN_SNAPS_BETWEEN_ADS }
}

[certain]
class CompositeConfigurationProvider {

    void $<init>(...) {
        .string "CompositeConfigurationProvider";
    }

    Object get(!ConfigKeyBase, !ConfigValueType, ...) {
        .string contains "for config";
        .string contains "appStartExperimentReader";
    }
}

class UploadSnapReadReceiptDurableJobProcessor {

    !RxSupplier uploadReadReceipts(...) {
        .string "UploadSnapReadReceiptDurableJobProcessor";
        .string "storyType";
    }
}

class DiscoverViewBinder {

    void setSections(List) {
        .string "dfosc:setSections";
    }
}

class DiscoverFeedObservableSection {

    !DiscoverFeedSection model;

    boolean $equals(...) {
        .string contains "DiscoverFeedObservableSection";
    }
}

[certain]
class DiscoverFeedSectionLayout {

    int verticalSectionLayout;
    int horizontalSectionLayout;

    String $toString() {
        .string contains "DiscoverFeedSectionLayout";
        .string contains "horizontalSectionLayout";
    }
}

[certain]
class DiscoverFeedSection {

    String name;
    !DiscoverFeedSectionLayout layout;

    boolean $equals(...) {
        .string contains "DiscoverFeedSection";
    }
}

[certain]
class ArroyoMessageListDataProvider {

    void $<init>(...) {
        .string "ArroyoMessageListDataProvider";
    }

    * enterConversation(!ChatContext, ...) {
        .string "NativeSessionWrapper:enterConversation";
    }
}

[late]
class DestinationInfo {

    Uri destinationUri;
    String actualFileName;

    String $toString() {
        .string "DestinationInfo(destinationUri=";
        .string ", actualFileName=";
    }
}

[certain]
class MediaExportControllerImpl {

    void $<init>(...) {
        .string "MediaExportControllerImpl";
    }

    Uri exportMedia(*, *, #DestinationInfo, ...) {
        .string "mime_type";
        .string "_display_name";
        .string "_size";
    }
}

[certain]
class DefaultFetchConversationCallback extends FetchConversationWithMessagesCallback {

    #ConversationDummyInterface dummy;
    !UUID conversationId;
    [discard] boolean b0;

    void $<init>(...) {
        .string "NativeSessionWrapper:FetchConversationWithMessages";
    }

    void $onFetchConversationWithMessagesComplete(...)
}

[certain]
class DefaultFetchMessageCallback extends FetchMessageCallback {

    [discard] int i0;
    #MessageDummyInterface dummy;

    void $<init>(...)

    void $onFetchMessageComplete(...)
}

[certain]
class SelectFriendsByUserIds {

    !SnapUsername username;
    [late] String userId;
    [late] String displayName;
    [late] Integer streakLength;
    [late] Long streakExpiration;

    String $toString() {
        .string contains "SelectFriendsByUserIds";
        [strict]
        .string contains " userId:", bind field userId next reference;
        .string contains " displayName:", bind field displayName next reference;
        .string contains " streakLength:", bind field streakLength next reference;
        .string contains " streakExpiration:", bind field streakExpiration next reference;
    }
}

[certain, discard]
class SelectFriendsByUserIdsCaller {

    static this INSTANCE;

    * call(...) {
        .new !SelectFriendsByUserIds;
    }
}

[certain, discard]
class FriendRepositorySqlActions {

    * func0(...) {
        .string "Friend.sq";
        .string "countMutualFriends";
    }

    * observeSelectFriendsByUserIds(Collection) {
        .field !SelectFriendsByUserIdsCaller->!INSTANCE;
    }
}

[certain]
class FriendsRepository {

    void $<init>(...) {
        .string "FriendRepository";
    }

    List selectFriendsByUserIds(List) {
        .method !FriendRepositorySqlActions->!observeSelectFriendsByUserIds;
    }
}

[certain, discard]
class SendToControllerActionSendHandler {

    void $<init>(...) {
        .string "SendToControllerActionSendHandler";
    }
}

[certain]
class VideoLengthChecker {

    [discard] !SendToControllerActionSendHandler o0;

    * $apply(*) {
        .string "image/";
        .string "video/";
        .type !MediaPackage;
    }
}

[certain, obfuscated]
enum ChatCommandSource {

    [late] static this .fields {
        CHAT,
        [discard] CAMERA,
        [discard] DISCOVER,
        [discard] PROFILE,
        [discard] PUBLIC_PROFILE,
        [discard] STORY,
        [discard] PROFILE_GALLERY_PLAYBACK
    }
}

[certain]
class ArroyoConvertMessagesAction {

    * $apply(Object) {
        .string "ArroyoMessageListDataProvider:convertMessages";
    }
}

[certain]
class ArroyoChatCommandsClient {

    void $<init>(...) {
        .string "ArroyoChatCommandsClient";
    }

    void saveMessage(!ChatContext, String, boolean, boolean, !ChatCommandSource, boolean) {
        .string "ArroyoChatCommandsClient";
    }
}

[certain]
class ChatModelPlugin {

    void $<init>(Context, ...) {
        .field !ChatLayouts->!PLUGIN;
        .field !ChatLayouts->!PLUGIN_STATUS;
    }
}

[certain]
class NotificationBuilderUtil {

    void $<init>(...) {
        .string "android.support.allowGeneratedReplies";
        .string "android.car.EXTENSIONS";
    }
}

[certain]
class SnapNotificationBuilder {

    [discard] Notification baseNotification;
    [discard] Context context;
    [discard] RemoteViews remoteViews;

    Notification build() {
        .new !NotificationBuilderUtil;
    }
}

[certain]
class AesCrypto {

    void $<init>(String, String, ...)
    void $<init>(byte[], byte[])

    Cipher getCipher() {
        .string "AES/CBC/PKCS5Padding";
    }

    InputStream encrypt(InputStream)
    InputStream decrypt(InputStream)
}

[certain]
class ConversationStoryKeys {

    [late] !MapKey conversationId;
    [late] !MapKey senderId;

    static void $<clinit>() {
        [strict]
        .string "CONVERSATION_ID", bind field conversationId next reference;
        [strict]
        .string "SENDER_ID", bind field senderId next reference;
    }
}

[certain, obfuscated]
enum OperaDisplayState {

    [late] static this .fields { NONE, PREPARING, MINIMALLY_DISPLAYED, FULLY_DISPLAYED, ERROR }
}

class OperaPageViewController {

    !StoryMetadata metadata;
    !OperaDisplayState state;

    void $<init>(...) {
        .string "OperaPageViewController";
    }

    void onDisplayStateChanged() {
        .field !OperaDisplayState->!FULLY_DISPLAYED;
        .field !OperaDisplayState->!MINIMALLY_DISPLAYED;
        .string contains "display state";
        .string "Opera:moveNext";
    }
}

[certain]
class CameraRollMediaId extends #CameraRollMediaBase {

    String $toString() {
        .string "CameraRollMediaId(mediaId=";
        .string ", durationMs=";
    }
}

[certain]
class CameraRollVideoLengthChecker {

    static boolean isOver60Seconds(!CameraRollMediaBase) {
        .const 60000;
    }
}



[certain, conserve]
class ProfileActionSheetCreator {


    Object actionMenuContext;
    Object nestedContext;

    * apply(*) {
        .string "Notification not supported for ";
    }
}

[certain, obfuscated]
enum ActionSheetType {

    [late] static this .fields { PROFILE, PROFILE_ACTION_MENU }
}

[certain]
class ActionMenuContext {

    !ActionSheetType sheetType;
    !FriendInfo friendInfo;
    !BasicFeedInfo feedInfo;
}

[certain]
class ActionClickableCaret {

    String primaryText;
    Drawable drawable;
    #Func0 onClick;

    void $<init>(...)

    String $toString() {
        .string "ClickableCaret(primaryText=";
        .string ", drawable=";
    }
}

[certain]
class ActionSwitch {

    String primaryText;
    boolean isSwitchedOn;
    !Func1 onToggleRequested;
    !Func1 onToggle;

    void $<init>(...)

    String $toString() {
        .string "Switch(primaryText=";
        .string ", isSwitchedOn=";
    }
}

[certain]
class ActionPlain {

    String primaryText;
    !Func0 onClick;

    void $<init>(String, !Func0)

    String $toString() {
        .string "Plain(primaryText=";
        .string ", onClick=";
    }
}

[certain]
class NestedActionMenuContext {

    Context context;

    static void display(this, String, List)
}



[certain]
class StoryKey {

    String storyId;

    String $toString() {
        .string "StoryKey(storyId=";
        .string ", storyKind=";
    }
}

[certain]
class StorySnapKey {

    !StoryKey storyKey;

    String $toString() {
        .string "StorySnapKey(storyKey=";
    }
}

[certain]
class StorySnapViewReportingInfo {

    String snapOwnerUserId;
    !StorySnapKey storySnapKey;

    String $toString() {
        .string "StorySnapViewReportingInfo(viewReportingId=";
        .string ", snapOwnerUserId=";
    }
}

[certain, obfuscated]
enum DfSectionType {

    [late] static this .fields { FRIENDS_SECTION, SUBSCRIBED_SECTION, FOR_YOU_SECTION, UNKNOWN_SECTION }
}

[certain]
class DfSectionController {

    !DfSectionType sectionType;

    [discard] void $<init>(...) {
        .string "DfSectionController";
    }
}

[certain, discard]
class DiscoverFeedAdapterBase extends #AdapterBase {

    [discard] void $<init>(...) {
        .string "df:dfa:init";
    }
}

[certain]
class AllTabsDiscoverFeedAdapter extends !DiscoverFeedAdapterBase {

    [discard] void $<init>(...) {
        .string "AllTabsDiscoverFeedAdapter";
    }
}

[late]
class AdapterBase {

    void addSection(#AdapterSection)
}

[late]
interface AdapterSection {

    [discard] String getClassName()
    [discard] void m0(View, ...)
    [discard] void m1(View, ...)
}

[certain]
class SnapSize {

    @SerializedName("width")
    int width;
    @SerializedName("height")
    int height;

    void $<init>(int, int)

    void $<init>(this)

    String $toString() {
        .string contains "W x H";
    }
}

[certain]
class RecordingCodecConfiguration {

    !SnapSize resolution;
    int bitrate;

    String $toString() {
        .string "RecordingCodecConfiguration(resolution=";
    }
}

[certain]
class ScCameraSettings {

    !SnapSize previewResolution;
    !SnapSize pictureResolution;

    String $toString() {
        .string "ScCameraSettings{mScFocusMode=";
        .string ", mPreviewResolution=";
        .string ", mPictureResolution=";
    }
}

[certain, obfuscated]
enum MediaQualityLevel {

    [late] static this .fields { LEVEL_NONE, LEVEL_1, LEVEL_MAX, UNRECOGNIZED_VALUE }
}

[certain]
class TranscodingRequest {

    !MediaQualityLevel qualityLevel;

    String $toString() {
        .string "TranscodingRequest(caller=";
        .string ", sourceInfo=";
        .string ", mediaQualityLevel=";
    }
}

[certain]
class DataWithPagination {

    !SnapIterable dataModels;
    boolean hasMore;

    String $toString() {
        .string "DataWithPagination(dataModels=";
        .string ", hasMore=";
    }
}

[certain]
class DfSectionControllerActions {

    [discard] int i0;
    Object sectionController;

    * $apply(*) {
        .string "df:sectioncontroller:toViewModels";
    }
}

[certain]
class FriendStoryData implements #StoryData {

    [late] String storyRecordStoryId;
    [late] String displayName;

    String $toString() {
        .string "FriendStoryData(mixerStoryMetaData=";
        [strict]
        .string ", storyRecordStoryId=", bind field storyRecordStoryId next reference;
        [strict]
        .string ", displayName=", bind field displayName next reference;
    }
}

[certain, exact]
class StoryViewModel {

    !StoryData storyData;
    [discard] Integer i0;

    void $<init>(!StoryData, Integer)

    boolean $equals(*)
    int $hashCode()
}

[late]
interface Func0 {

    * invoke()
}

[late]
interface Func1 {

    * invoke(*)
}

[late]
interface Func2 {

    * invoke(*, *)
}
